CREATE TABLE roles (
  role_id   NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre_rol      VARCHAR2(30) NOT NULL UNIQUE
);
--
CREATE TABLE users (
  user_id        NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  email          VARCHAR2(150) NOT NULL UNIQUE,
  password_hash  VARCHAR2(255) NOT NULL,
  nombre_completo      VARCHAR2(120),
  role_id        NUMBER NOT NULL,
  region         VARCHAR2(80),
  comuna         VARCHAR2(80),
  status         VARCHAR2(20) DEFAULT 'ACTIVO' CHECK (status IN ('ACTIVO','INACTIVO')),
  created_at     TIMESTAMP DEFAULT SYSTIMESTAMP,
  CONSTRAINT fk_users_role FOREIGN KEY (role_id) REFERENCES roles(role_id)
);
--
CREATE INDEX idx_users_role ON users(role_id);
------------------------------------------------------------------------------------------------------

CREATE TABLE dispositivo_catalogo (
  dispositivo_id          NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre_dispositivo               VARCHAR2(80)  NOT NULL,
  descripcion_dispositivo        VARCHAR2(400),
  example_image_url  VARCHAR2(400),
  active             CHAR(1) DEFAULT 'Y' CHECK (active IN ('Y','N'))
);
--
CREATE UNIQUE INDEX ux_dispositivo_catalogo_nombre ON dispositivo_catalogo(nombre_dispositivo);
--
CREATE TABLE componentes_catalogo (
  componente_id    NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre_componente            VARCHAR2(120) NOT NULL,
  descripcion_componente     VARCHAR2(400),
  active          CHAR(1) DEFAULT 'Y' CHECK (active IN ('Y','N')),
  -- Defaults por componente
  default_is_recyclable  CHAR(1) DEFAULT 'N' NOT NULL CHECK (default_is_recyclable IN ('Y','N')),
  default_is_reusable    CHAR(1) DEFAULT 'N' NOT NULL CHECK (default_is_reusable   IN ('Y','N')),
  default_is_sellable    CHAR(1) DEFAULT 'N' NOT NULL CHECK (default_is_sellable   IN ('Y','N')),
  default_is_hazardous   CHAR(1) DEFAULT 'N' NOT NULL CHECK (default_is_hazardous  IN ('Y','N')),
  guidance_short         VARCHAR2(200),
  guidance_url           VARCHAR2(400)
);
--
CREATE UNIQUE INDEX ux_componentes_catalog_nombre ON componentes_catalogo(nombre_componente);
--
CREATE TABLE dispositivo_componente_mapa (
  dispositivo_id     NUMBER NOT NULL,
  componente_id  NUMBER NOT NULL,
  CONSTRAINT pk_dev_comp PRIMARY KEY (dispositivo_id, componente_id),
  CONSTRAINT fk_dcm_device   FOREIGN KEY (dispositivo_id)    REFERENCES dispositivo_catalogo(dispositivo_id),
  CONSTRAINT fk_dcm_component FOREIGN KEY (componente_id) REFERENCES componentes_catalogo(componente_id)
);

--
CREATE TABLE dispositivo_componente_policy (
  dispositivo_id     NUMBER NOT NULL,
  componente_id  NUMBER NOT NULL,
  is_recyclable CHAR(1) CHECK (is_recyclable IN ('Y','N')),
  is_reusable   CHAR(1) CHECK (is_reusable   IN ('Y','N')),
  is_sellable   CHAR(1) CHECK (is_sellable   IN ('Y','N')),
  is_hazardous  CHAR(1) CHECK (is_hazardous  IN ('Y','N')),
  notes         VARCHAR2(400),
  CONSTRAINT pk_dcp PRIMARY KEY (dispositivo_id, componente_id),
  CONSTRAINT fk_dcp_device   FOREIGN KEY (dispositivo_id)    REFERENCES dispositivo_catalogo(dispositivo_id),
  CONSTRAINT fk_dcp_component FOREIGN KEY (componente_id) REFERENCES componentes_catalogo(componente_id)
);
--
CREATE TABLE component_condition_rules (
  componente_id    NUMBER NOT NULL,
  condition_code  VARCHAR2(20) NOT NULL,
  allow_reuse     CHAR(1) CHECK (allow_reuse IN ('Y','N')),
  allow_sell      CHAR(1) CHECK (allow_sell  IN ('Y','N')),
  allow_recycle   CHAR(1) CHECK (allow_recycle IN ('Y','N')),
  notes           VARCHAR2(400),
  CONSTRAINT pk_ccr PRIMARY KEY (componente_id, condition_code),
  CONSTRAINT fk_ccr_comp FOREIGN KEY (componente_id) REFERENCES componentes_catalogo(componente_id)
);
--
CREATE TABLE detections (
  detection_id       NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id            NUMBER NOT NULL,
  dispositivo_id          NUMBER,  -- nullable si IA no segura
  image_url          VARCHAR2(400) NOT NULL,
  detected_at        TIMESTAMP DEFAULT SYSTIMESTAMP,
  status             VARCHAR2(20) DEFAULT 'OK' CHECK (status IN ('OK','NO_DETECT','LOW_CONF')),
  confidence_overall NUMBER(5,4),
  CONSTRAINT fk_det_user   FOREIGN KEY (user_id)   REFERENCES users(user_id),
  CONSTRAINT fk_det_device FOREIGN KEY (dispositivo_id) REFERENCES dispositivo_catalogo(dispositivo_id)
);
--
CREATE INDEX idx_det_user   ON detections(user_id);
CREATE INDEX idx_det_device ON detections(dispositivo_id);
--
CREATE TABLE detected_components (
  detected_component_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  detection_id     NUMBER NOT NULL,
  componente_id     NUMBER NOT NULL,
  confidence       NUMBER(5,4),
  -- flags instancia (resultado calculado)
  is_recyclable    CHAR(1) DEFAULT 'N' CHECK (is_recyclable IN ('Y','N')),
  is_reusable      CHAR(1) DEFAULT 'N' CHECK (is_reusable   IN ('Y','N')),
  is_sellable      CHAR(1) DEFAULT 'N' CHECK (is_sellable   IN ('Y','N')),
  is_not_recyclable CHAR(1) DEFAULT 'N' CHECK (is_not_recyclable IN ('Y','N')),
  condition_code   VARCHAR2(20), -- WORKING/DAMAGED/UNKNOWN
  notes            VARCHAR2(400),
  CONSTRAINT fk_dc_detection FOREIGN KEY (detection_id) REFERENCES detections(detection_id),
  CONSTRAINT fk_dc_component FOREIGN KEY (componente_id) REFERENCES componentes_catalogo(componente_id)
);
--
CREATE INDEX idx_dc_detection ON detected_components(detection_id);
CREATE INDEX idx_dc_component ON detected_components(componente_id);
------------------------------------------------------------------------------------------------------------

CREATE TABLE punto_reciclaje (
  recycling_point_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre_punto_reciclaje          VARCHAR2(160) NOT NULL,
  direccion       VARCHAR2(200),
  region_punto_reciclaje        VARCHAR2(80),
  comuna_punto_reciclaje        VARCHAR2(80),
  lat           NUMBER(10,6),
  lng           NUMBER(10,6),
  telefono         VARCHAR2(50),
  email         VARCHAR2(150),
  website       VARCHAR2(200),
  accepts_notes VARCHAR2(400),
  active        CHAR(1) DEFAULT 'Y' CHECK (active IN ('Y','N'))
);
--
CREATE INDEX idx_rp_region_comuna ON punto_reciclaje(region_punto_reciclaje, comuna_punto_reciclaje);
--
CREATE TABLE punto_reciclaje_acepta (
  recycling_point_id NUMBER NOT NULL,
  componente_id       NUMBER NOT NULL,
  accepts_recycle    CHAR(1) DEFAULT 'Y' CHECK (accepts_recycle IN ('Y','N')),
  accepts_reuse      CHAR(1) DEFAULT 'N' CHECK (accepts_reuse   IN ('Y','N')),
  accepts_buyback    CHAR(1) DEFAULT 'N' CHECK (accepts_buyback IN ('Y','N')),
  CONSTRAINT pk_rp_accepts PRIMARY KEY (recycling_point_id, componente_id),
  CONSTRAINT fk_rpa_point FOREIGN KEY (recycling_point_id) REFERENCES punto_reciclaje(recycling_point_id),
  CONSTRAINT fk_rpa_comp  FOREIGN KEY (componente_id)       REFERENCES componentes_catalogo(componente_id)
);
--
CREATE INDEX idx_rpa_component ON punto_reciclaje_acepta(componente_id);
--
CREATE TABLE compania_domicilio (
  pickup_company_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre_compania_domicilio           VARCHAR2(160) NOT NULL,
  website        VARCHAR2(200),
  telefono          VARCHAR2(50),
  email          VARCHAR2(150),
  coverage_notes VARCHAR2(400),
  active         CHAR(1) DEFAULT 'Y' CHECK (active IN ('Y','N'))
);
--
CREATE TABLE domicilio_cobertura (
  pickup_coverage_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  pickup_company_id  NUMBER NOT NULL,
  region_cobertura       VARCHAR2(80),
  comuna_cobertura       VARCHAR2(80),
  notes        VARCHAR2(400),
  CONSTRAINT fk_pcov_company FOREIGN KEY (pickup_company_id) REFERENCES compania_domicilio(pickup_company_id)
);
--
CREATE INDEX idx_pcov_company ON domicilio_cobertura(pickup_company_id);
CREATE INDEX idx_pcov_region_comuna ON domicilio_cobertura(region_cobertura, comuna_cobertura);
--
CREATE TABLE marketplace_links (
  marketplace_link_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  componente_id   NUMBER NOT NULL,
  site_nombre      VARCHAR2(80) NOT NULL,      -- ej. MercadoLibre, Yapo, etc.
  base_url       VARCHAR2(400) NOT NULL,     -- ej. https://www.mercadolibre.cl
  query_template VARCHAR2(400) NOT NULL,     -- ej. '{component} {device} {modelo}'
  -- opcional: especializar por device si quieres queries más finas
  dispositivo_id      NUMBER,
  CONSTRAINT fk_mkt_comp FOREIGN KEY (componente_id) REFERENCES componentes_catalogo(componente_id),
  CONSTRAINT fk_mkt_dev  FOREIGN KEY (dispositivo_id)    REFERENCES dispositivo_catalogo(dispositivo_id)
);
--
CREATE INDEX idx_mkt_comp_dev ON marketplace_links(componente_id, dispositivo_id);
----------------------------------------------------------------------------------------------------------
CREATE TABLE edu_content (
  edu_content_id  NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  componente_id    NUMBER NOT NULL,
  titulo           VARCHAR2(160),
  content_html    CLOB,
  updated_at      DATE DEFAULT SYSDATE,
  CONSTRAINT fk_edu_comp FOREIGN KEY (componente_id) REFERENCES componentes_catalogo(componente_id)
);
--
CREATE INDEX idx_edu_comp ON edu_content(componente_id);
---------------------------------------------------------------------------------------------------------------
CREATE TABLE gamification_reglas (
  rule_id     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  action_code VARCHAR2(40) NOT NULL UNIQUE, -- DETECTION_OK / DROP_OFF / REQUEST_PICKUP / SELL_COMPONENT
  points      NUMBER(10) NOT NULL,
  descripcion_reglas VARCHAR2(200)
);
--
CREATE TABLE user_puntos (
  user_puntos_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id        NUMBER NOT NULL,
  total_puntos   NUMBER(12) DEFAULT 0,
  nivel          VARCHAR2(20) DEFAULT 'Bronce'
                  CHECK (nivel IN ('Bronce','Plata','Oro','Platino')),
  updated_at     TIMESTAMP DEFAULT SYSTIMESTAMP,
  CONSTRAINT uq_user_puntos_user UNIQUE (user_id),
  CONSTRAINT fk_user_puntos_user FOREIGN KEY (user_id) REFERENCES users(user_id)
);

--
CREATE TABLE user_points_log (
  points_log_id    NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id          NUMBER NOT NULL,
  action_code      VARCHAR2(40),  -- puede mapear a gamification_rules.action_code
  points           NUMBER(10) NOT NULL,
  created_at       TIMESTAMP DEFAULT SYSTIMESTAMP,
  ref_detection_id NUMBER,        -- opcional: enlaza a detección
  CONSTRAINT fk_upl_user      FOREIGN KEY (user_id)          REFERENCES users(user_id),
  CONSTRAINT fk_upl_detection FOREIGN KEY (ref_detection_id) REFERENCES detections(detection_id)
);
--
CREATE INDEX idx_upl_user_created ON user_points_log(user_id, created_at);
--
-- COMMENTS (diccionario básico)

COMMENT ON TABLE users IS 'Usuarios finales y administradores (via roles).';
COMMENT ON COLUMN users.email IS 'Correo único del usuario.';
COMMENT ON COLUMN users.role_id IS 'FK a roles (user/admin).';

COMMENT ON TABLE dispositivo_catalogo IS 'Catálogo de tipos de dispositivos (ej. Teléfono, Notebook).';
COMMENT ON TABLE componentes_catalogo IS 'Catálogo de componentes/piezas (ej. Pantalla, Batería, Puerto USB).';
COMMENT ON COLUMN componentes_catalogo.default_is_recyclable IS 'Bandera por defecto si el componente es reciclable.';
COMMENT ON COLUMN componentes_catalogo.default_is_reusable   IS 'Bandera por defecto si el componente es reutilizable.';
COMMENT ON COLUMN componentes_catalogo.default_is_sellable   IS 'Bandera por defecto si el componente es vendible como repuesto.';
COMMENT ON COLUMN componentes_catalogo.default_is_hazardous  IS 'Bandera por defecto si el componente es peligroso (ej. batería).';

COMMENT ON TABLE dispositivo_componente_mapa IS 'Relación N:M entre dispositivos y sus componentes típicos.';
COMMENT ON TABLE dispositivo_componente_policy IS 'Overrides por par device+component que pisan los defaults del componente.';
COMMENT ON TABLE component_condition_rules IS 'Reglas por condición del componente (WORKING/DAMAGED/UNKNOWN).';

COMMENT ON TABLE detections IS 'Detecciones realizadas por usuarios (foto, IA, dispositivo detectado).';
COMMENT ON TABLE detected_components IS 'Componentes detectados en una detección (con flags instancia).';

COMMENT ON TABLE punto_reciclaje IS 'Puntos de reciclaje (dirección, comuna, capacidades).';
COMMENT ON TABLE punto_reciclaje_acepta IS 'Qué componentes recibe cada punto y bajo qué modalidad (reciclar/reusar/buyback).';
COMMENT ON TABLE compania_domicilio IS 'Empresas de retiro a domicilio.';
COMMENT ON TABLE domicilio_cobertura IS 'Cobertura territorial de cada empresa de retiro.';

COMMENT ON TABLE marketplace_links IS 'Sitios y plantillas de búsqueda para vender componentes (sin precios).';
COMMENT ON COLUMN marketplace_links.query_template IS 'Plantilla: usar placeholders {component}, {device}, {modelo}.';

COMMENT ON TABLE edu_content IS 'Contenido educativo por componente: qué se hace con lo reciclado, etc.';

COMMENT ON TABLE gamification_reglas IS 'Catálogo de acciones y puntajes.';
COMMENT ON TABLE user_puntos IS 'Total de puntos y nivel por usuario.';
COMMENT ON TABLE user_points_log IS 'Historial de eventos con puntos por usuario.';